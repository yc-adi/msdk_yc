name: BLE Examples Test

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  #push:
  #  branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    # The type of runner that the job will run on
    runs-on: [ self-hosted, btm-ci ]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Clean
        continue-on-error: true
        run: |
          # Remove local modifications
          set +e

          # Attempt to clean the repo
          git scorch
          retval=$?

          # Remove everything if this fails
          if [[ $retval -ne 0 ]]
          then
            rm -rf *
          fi

          set -e

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          submodules: false
          fetch-depth: 0

      # Runs a set of commands using the runners shell
      - name: BLE examples functionality test
        run: |
          # Remove local modifications
          git scorch
          # Update the submodules, this will use ssh
          git submodule init
          git submodule sync
          git submodule update --init --recursive

          BLE_FILES_CHANGED=0
          
          # Check for changes made to these files
          WATCH_FILES="\
          Examples/MAX32655/BLE \
          Libraries/libs.mk \
          Libraries/CMSIS/Device/Maxim/MAX32655 \
          Libraries/PeriphDrivers/libPeriphDriver.mk \
          Libraries/PeriphDrivers/periphdriver.mk \
          Libraries/PeriphDrivers/max32655_files.mk \
          Libraries/PeriphDrivers/Source \
          Libraries/PeriphDrivers/Include/MAX32655 \
          Libraries/BlePhy/MAX32655 \
          Libraries/Boards/MAX32655"
          
          # Get the diff from main
          CHANGE_FILES=$(git diff --ignore-submodules --name-only remotes/origin/main)
          
          echo "Watching these locations and files"
          echo $WATCH_FILES
          
          echo "Checking the following changes"
          echo $CHANGE_FILES
          
          # Assume we want to actually run the workflow if no files changed
          if [[ "$CHANGE_FILES" != "" ]]; then
            for watch_file in $WATCH_FILES; do 
              if [[ "$CHANGE_FILES" == *"$watch_file"* ]]; then
                BLE_FILES_CHANGED=1
              fi
            done
            if [[ $BLE_FILES_CHANGED -eq 0 ]]
            then
              echo "Skipping Test"
              exit 0
            fi
          fi
          
          echo "Running Test"
          
          # Lock hardware resources
          python3 /home/btm-ci/Workspace/Resource_Share/Resource_Share.py -l -t 600 /home/btm-ci/Workspace/Resource_Share/max32655_0.txt
          python3 /home/btm-ci/Workspace/Resource_Share/Resource_Share.py -l -t 600 /home/btm-ci/Workspace/Resource_Share/max32655_1.txt
          cp -r .github/workflows/ci-tests/Examples_tests .
          chmod +x Examples_tests/local_testLauncher.sh
          cd Examples_tests/
          ./local_testLauncher.sh
          
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
            name: failure-report
            path: Examples_tests/results/
      
      # Unlock even when cancelled or failed
      - name: unlock
        if: always()
        run: |
          python3 /home/btm-ci/Workspace/Resource_Share/Resource_Share.py /home/btm-ci/Workspace/Resource_Share/max32655_1.txt
          python3 /home/btm-ci/Workspace/Resource_Share/Resource_Share.py /home/btm-ci/Workspace/Resource_Share/max32655_0.txt
